@using Microsoft.AspNetCore.Mvc.TagHelpers
@using RemaSoftware.Domain.Constants
@model RemaSoftware.WebApp.Models.HomeViewModel.HomeViewModel
@{
    ViewData["Title"] = "Dashboard";
}


<link href="~/css/plugins.bundle.css"/>

<div class="d-sm-flex align-items-center justify-content-between mb-4" xmlns="http://www.w3.org/1999/html">
    <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
    @* <a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm"> *@
    @*     <i class="fas fa-download fa-sm text-white-50"></i> Generate Report *@
    @* </a> *@
    @if (User.IsInRole(Roles.Admin))
    {
        <div id="eye-icon" class="mr-3" style="color: black;" onclick="toggleEye()">
            <i class="fas fa-eye fa-xl"></i>
        </div>
    }
</div>

@if (User.IsInRole(Roles.Admin)){
    <div class="row">
    <!-- Earnings (Monthly) Card Example -->
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-primary shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="h6 font-weight-bold text-primary text-uppercase mb-1">
                            Guadagno ultimo mese
                        </div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">
                            <div class="privacy-n d-none">&euro; @Model.LastMonthEarnings.ToString("N")</div>
                            <div class="privacy-d">*</div> 
                        </div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-euro-sign fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Earnings (Monthly) Card Example -->
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-success shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="h6 font-weight-bold text-success text-uppercase mb-1">
                            Ordini da concludere
                        </div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">
                            <div class="privacy-n d-none">@Model.TotalCountOrdersNotExtinguished</div>
                            <div class="privacy-d">*</div> 
                        </div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-calendar-times fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Earnings (Monthly) Card Example -->
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-info shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="h6 font-weight-bold text-info text-uppercase mb-1">
                            Pezzi lavorati
                        </div>
                        <div class="h5 mb-0 mr-3 font-weight-bold text-gray-800">
                            <div class="privacy-n d-none">@Model.TotalProcessedPieces</div>
                            <div class="privacy-d">*</div>
                        </div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-boxes fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Pending Requests Card Example -->
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-warning shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="h6 font-weight-bold text-warning text-uppercase mb-1">
                            Numero di clienti
                        </div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">
                            <div class="privacy-n d-none">@Model.TotalCustomerCount</div>
                            <div class="privacy-d">*</div>
                        </div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-user-friends fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
}

<div class="row">
    @if (User.IsInRole(Roles.Admin))
    {
        <!-- Area Chart -->
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Panoramica guadagni annuali</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="dashboardAreaChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    }
    <!-- Bar Chart -->
    <div class="@((User.IsInRole(Roles.Admin)) ? "col-xl-4 col-lg-5" : "col-6")">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Numero di pezzi attivi per cliente</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                <div class="">
                    <canvas id="dashboardBarChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

    <!-- Pie Chart -->
    @*    <div class="col-xl-4 col-lg-5">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Top 5 cliente per ordini inviati</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                <div class="chart-pie pt-4 pb-2">
                    <canvas id="dashboardPieChart"></canvas>
                </div>
                <div class="mt-4 text-center small">
                     @foreach (var cl in Model.PieChartData) *@
@*                     { *@
@*                         <span class="mr-2"> *@
@*                             <i class="fas fa-circle" style="color: @cl.BackgroundColor"></i> @cl.Label *@
@*                         </span> *@
    @*                     } 
                </div>
            </div>
        </div>
    </div>
</div>*@

@if (User.IsInRole(Roles.Admin))
{
    <div class="row">

        <!-- Content Column -->
        <div class="col-lg-8 mb-4">

            <!-- Project Card Example -->
            <div class="card shadow mb-4 d-none">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Ordini vicini alla scadenza</h6>
                </div>
                <div class="card-body">
                    @foreach (var order in Model.OrderNearToDeadline)
                    {

                        var missingDays = order.DataOut.Subtract(DateTime.UtcNow.Date).Days;

                        <div class="mb-4">
                            @order.Product.Client.Name, @order.Product.Name, @order.Number_Piece pezzi @* - (mancano: <b>@missingDays giorni </b> )*@
                        </div>

                        var percent = missingDays == 0
                            ? 0
                            : order.DataOut.Subtract(DateTime.Now).Days * 100 / missingDays;
                        <h4 class="small font-weight-bold">
                            @order.Product.SKU <span class="float-right">@percent%</span>
                        </h4>
                        <div class="progress mb-4">
                            <div class="progress-bar bg-danger" role="progressbar" style="width: @percent%"
                                 aria-valuenow="20" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    }

                </div>
            </div>

            <div class="card shadow card-bordered d-none">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Panoramica pezzi in uscita</h6>
                </div>
                <div class="card-body">
                    <div id="kt_apexcharts_5" style="height: 350px;"></div>
                </div>
            </div>

        </div>

        <div class="col-lg-4 mb-4">

            <!-- Illustrations -->
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Aggiungi / sottrai quantità</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-8">
                            <select class="form-control" id="dd-articles">
                                @foreach (var article in Model.StockArticleAddRemQty)
                                {
                                    var value = $"{article.Name}";
                                    <option value="@article.Warehouse_StockID">@value</option>
                                }
                            </select>
                        </div>

                        <div class="col-4">
                            <a class="btn btn-primary" style="color: #1cc88a; min-width: 3em" onclick="AddRemoveSingleQty(true)">
                                +1
                            </a>
                            <a class="btn btn-primary" style="color: #e74a3b; min-width: 3em" onclick="AddRemoveSingleQty(false)">
                                -1
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Approach -->
            @*<div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Development Approach</h6>
            </div>
            <div class="card-body">
                <p>
                    SB Admin 2 makes extensive use of Bootstrap 4 utility classes in order to reduce
                    CSS bloat and poor page performance. Custom CSS classes are used to create
                    custom components and custom utility classes.
                </p>
                <p class="mb-0">
                    Before working with this theme, you should become familiar with the
                    Bootstrap framework, especially the utility classes.
                </p>
            </div>
        </div>*@
        </div>
    </div>
}

<script src="~/vendor/chart.js/Chart.js"></script>
<script src="~/js/plugins.bundle.js"></script>

<script src="https://cdn.jsdelivr.net/npm/apexcharts@3.32.0"></script>

<style>
   #eye-icon {
       cursor: pointer;
   }

   .apexcharts-tooltip.apexcharts-theme-light{
       background-color:  #ffffff !important;
   }
   
</style>
<script>

    function AddRemoveSingleQty(isAdd) {
        var model = {
            articleId: $("#dd-articles").val(),
            qtyToAddRemove: 1,
            qtyToAddRemoveRadio: isAdd ? "1" : "0" 
        }
                
        $.post('@Url.Action("AddOrRemoveQuantity", "Stock")', model, function (data){
            if (data.result == true){
               toastNotifySuccess(data.toastMessage);
            }else{
                toastNotifyError(data.toastMessage);
            }
        });
    }
    var ctx = document.getElementById('dashboardBarChart');
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: @Json.Serialize(Model.BarChartData.Select(s=>s.Label).ToArray()),
            datasets: [{
                label: 'Numero di pezzi attivi',
                data: @Json.Serialize(Model.BarChartData.Select(s=>s.Value).ToArray()),
                backgroundColor: 
                    'rgba(54, 162, 235, 0.2)',
                borderColor: 
                    'rgba(54, 162, 235, 1)'
                ,
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                },
                xAxes: [{
                    barThickness: 'flex',  // number (pixels) or 'flex'
                    maxBarThickness: 80 // number (pixels)
                }]
            },
            legend: false
        }
    });
    var ctxArea = document.getElementById("dashboardAreaChart");
    var myLineChart = new Chart(ctxArea, {
      type: 'line',
      data: {
        labels: ["Gen", "Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"],
        datasets: [{
          label: "Guadagni",
          lineTension: 0.3,
          backgroundColor: "rgba(78, 115, 223, 0.05)",
          borderColor: "rgba(78, 115, 223, 1)",
          pointRadius: 3,
          pointBackgroundColor: "rgba(78, 115, 223, 1)",
          pointBorderColor: "rgba(78, 115, 223, 1)",
          pointHoverRadius: 3,
          pointHoverBackgroundColor: "rgba(78, 115, 223, 1)",
          pointHoverBorderColor: "rgba(78, 115, 223, 1)",
          pointHitRadius: 10,
          pointBorderWidth: 2,
          data: @Json.Serialize(@Model.AreaChartData.Select(s=>decimal.Parse(s.Value)).ToArray()),
        }],
      },
      options: {
        maintainAspectRatio: false,
        layout: {
          padding: {
            left: 10,
            right: 25,
            top: 25,
            bottom: 0
          }
        },
        scales: {
          xAxes: [{
            time: {
              unit: 'date'
            },
            gridLines: {
              display: false,
              drawBorder: false
            },
            ticks: {
              maxTicksLimit: 7
            }
          }],
          yAxes: [{
            ticks: {
              maxTicksLimit: 5,
              padding: 10,
              // Include a dollar sign in the ticks
              callback: function(value, index, values) {
                return '€' + number_format(value);
              }
            },
            gridLines: {
              color: "rgb(234, 236, 244)",
              zeroLineColor: "rgb(234, 236, 244)",
              drawBorder: false,
              borderDash: [2],
              zeroLineBorderDash: [2]
            }
          }],
        },
        legend: {
          display: false
        },
        tooltips: {
          backgroundColor: "rgb(255,255,255)",
          bodyFontColor: "#858796",
          titleMarginBottom: 10,
          titleFontColor: '#6e707e',
          titleFontSize: 14,
          borderColor: '#dddfeb',
          borderWidth: 1,
          xPadding: 15,
          yPadding: 15,
          displayColors: false,
          intersect: false,
          mode: 'index',
          caretPadding: 10,
          callbacks: {
            label: function(tooltipItem, chart) {
              var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
              return datasetLabel + ': €' + number_format(tooltipItem.yLabel);
            }
          }
        }
      }
    });
    
    function number_format(number, decimals, dec_point, thousands_sep) {
      // *     example: number_format(1234.56, 2, ',', ' ');
      // *     return: '1 234,56'
      number = (number + '').replace(',', '').replace(' ', '');
      var n = !isFinite(+number) ? 0 : +number,
        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
        sep = (typeof thousands_sep === 'undefined') ? '.' : thousands_sep,
        dec = (typeof dec_point === 'undefined') ? ',' : dec_point,
        s = '',
        toFixedFix = function(n, prec) {
          var k = Math.pow(10, prec);
          return '' + Math.round(n * k) / k;
        };
      // Fix for IE parseFloat(0.55).toFixed(0) = 0;
      s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
      if (s[0].length > 3) {
        s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
      }
      if ((s[1] || '').length < prec) {
        s[1] = s[1] || '';
        s[1] += new Array(prec - s[1].length + 1).join('0');
      }
      return s.join(dec);
    }
    
    let isEyeClosed = true;
    
    function toggleEye() {
        
        const privacyNs = document.getElementsByClassName('privacy-n');
        const privacyDs = document.getElementsByClassName('privacy-d');
          
        const eyeIcon = document.getElementById('eye-icon');
        if (isEyeClosed) {
            eyeIcon.innerHTML = '<i class="fas fa-eye-slash fa-xl d-inline"></i>';
            for (let i = 0; i < privacyNs.length; i++) {
                privacyNs[i].classList.remove('d-none');
                privacyDs[i].classList.add('d-none');
            }
        } else {
            eyeIcon.innerHTML = '<i class="fas fa-eye fa-xl"></i>';
            for (let i = 0; i < privacyNs.length; i++) {
                privacyNs[i].classList.add('d-none');
                privacyDs[i].classList.remove('d-none');    
            }
        }

        isEyeClosed = !isEyeClosed;
    }

    function getCssVariableValue(variable) {
        return getComputedStyle(document.documentElement).getPropertyValue(variable).trim();
    }

    function initializeChart() {
        var element = document.getElementById('kt_apexcharts_5');

        if (!element) {
            return;
        }

        var labelColor = '#6c757d';
        var borderColor = '#e9ecef';
        var colors = ['#007bff', '#17a2b8', '#ffa500', '#ffc107', '#20c997', '#28a745', '#dc3545', '#6f42c1', '#D7ECFB'];

        var buoniData = @Html.Raw(Json.Serialize(Model.AreaPiecesChartData.Select(x => x.Value.Number_Piece)));
        var persiData = @Html.Raw(Json.Serialize(Model.AreaPiecesChartData.Select(x => -x.Value.NumberLostPiece)));
        var scartiData = @Html.Raw(Json.Serialize(Model.AreaPiecesChartData.Select(x => -x.Value.NumberWastePiece)));
        var mancantiData = @Html.Raw(Json.Serialize(Model.AreaPiecesChartData.Select(x => -x.Value.NumberMissingPiece)));
        var zamaData = @Html.Raw(Json.Serialize(Model.AreaPiecesChartData.Select(x => -x.Value.NumberZama)));
        var resoScartoData = @Html.Raw(Json.Serialize(Model.AreaPiecesChartData.Select(x => -x.Value.NumberReturnDiscard)));
        var resoData = @Html.Raw(Json.Serialize(Model.AreaPiecesChartData.Select(x => x.Value.NumberResoPiece)));
        var freeRepairData = @Html.Raw(Json.Serialize(Model.AreaPiecesChartData.Select(x => x.Value.NumberFreeRepairPiece)));
        var totaleData = buoniData.map((v, i) => v + scartiData[i] + persiData[i] + zamaData[i] + resoScartoData[i] + resoData[i] + freeRepairData[i]);

        var maxDataValue = Math.max(...totaleData);
        var calculatedHeight = Math.max(300, Math.min(maxDataValue * 10, 400));
        
        var options = {
            series: [{
                name: 'Buoni',
                type: 'bar',
                stacked: true,
                data: buoniData
            }, {
                name: 'Persi',
                type: 'bar',
                stacked: true,
                data: persiData
            }, {
                name: 'Scarti lavorati',
                type: 'bar',
                stacked: true,
                data: scartiData
            }, {
                name: 'Mancanti',
                type: 'bar',
                stacked: true,
                data: mancantiData
            }, {
                name: 'Zama scoperto',
                type: 'bar',
                stacked: true,
                data: zamaData
            }, {
                name: 'Reso scarto non lavorato',
                type: 'bar',
                stacked: true,
                data: resoScartoData
            }, {
                name: 'Reso non lavorato',
                type: 'bar',
                stacked: true,
                data: resoData
            }, {
                name: 'Riparazione gratuita',
                type: 'bar',
                stacked: true,
                data: freeRepairData
            }, {
                name: 'Totale',
                type: 'area',
                data: totaleData
            }],
            chart: {
                stacked: true,
                height: calculatedHeight,
                toolbar: { show: false },
                events: {
                    dataPointMouseEnter: function(event, chartContext, config) {
                        const tooltipElement = document.querySelector('.apexcharts-tooltip');
                        if (tooltipElement) {
                            tooltipElement.style.background = 'white';
                            tooltipElement.style.border = '1px solid #e9ecef';
                            tooltipElement.style.boxShadow = '0 2px 5px rgba(0, 0, 0, 0.1)';
                        }
                    }
                }
            },
            plotOptions: {
                bar: {
                    stacked: true,
                    horizontal: false,
                    endingShape: 'rounded',
                    columnWidth: ['12%']
                },
            },
            legend: {
                show: false
            },
            dataLabels: {
                enabled: false
            },
            stroke: {
                curve: 'smooth',
                show: true,
                width: 2,
                colors: ['transparent']
            },
            xaxis: {
                categories: ["Gen", "Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"],
                axisBorder: { show: false },
                axisTicks: { show: false },
                labels: {
                    style: {
                        colors: labelColor,
                        fontSize: '12px'
                    }
                }
            },
            yaxis: {
                max: Math.ceil(maxDataValue * 1.2),
                labels: {
                    style: {
                        colors: labelColor,
                        fontSize: '12px'
                    }
                }
            },
            fill: {
                opacity: 1
            },
            tooltip: {
                style: {
                    fontSize: '12px'
                },
                y: {
                    formatter: function(val) {
                        return val;
                    }
                }
            },
            colors: colors, // Colori distinti per le serie
            grid: {
                borderColor: borderColor,
                strokeDashArray: 4,
                yaxis: {
                    lines: {
                        show: true
                    }
                },
                padding: {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0
                }
            }
        };

        var chart = new ApexCharts(element, options);
        chart.render();
    }

    document.addEventListener('DOMContentLoaded', function() {
        initializeChart();
    });
</script>