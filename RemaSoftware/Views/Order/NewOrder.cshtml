@model RemaSoftware.Models.ClientViewModel.NewOrderViewModel

@{
    ViewData["Title"] = "Nuovo Ordine";
}

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Aggiungi Ordine</h1>
</div>
<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Nuovo ordine</h6>
    </div>
    <div class="card-body">
        <form method="post">
            @Html.HiddenFor(model => model.Photo, new { @id = "Photo_base64" })
            @Html.HiddenFor(model => model.Order.SKU, new { @id = "myInput" })
            <div class="row">
                <div class="col-md-6" style="padding-top:50px;">
                    <div class="panel panel-default">
                        <div class="panel-heading">Vista Telecamera</div>
                        <div class="panel-body">
                            <div id="LiveCamera" style="margin-bottom:50px;"></div>
                            <input id="Photo_base64" asp-for="Photo" type="button" class="btn btn-primary" value="Fotografa Prodotto" onClick="CaptureSnapshot()">

                        </div>
                    </div>
                </div>
                <div class="col-md-6" style="padding-top:50px;">
                    <div class="panel panel-default">
                        <div class="panel-heading">Immagine Fotografata</div>
                        <div class="panel-body">
                            <div id="results">L'immagine apparirà qui.</div>
                        </div>
                        <br />
                        <br />
                    </div>
                </div>
            </div>
            <div class="row">

            </div>
            <div class="form-group">
                <label class="my-1 mr-2" for="inlineFormCustomSelectPref">Seleziona Cliente</label>
                <select class="custom-select my-1 mr-sm-2" id="inlineFormCustomSelectPref" name="Order.ClientID">
                    @foreach (var clients in Model.Clients)
                    {
                        <option value="@clients.ClientID">@clients.Name</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="formGroupExampleInput">Nome</label>
                <input asp-for="Order.Name" type="text" class="form-control" id="formGroupExampleInput" placeholder="Nome">
            </div>
            <div class="form-group">
                <label for="formGroupExampleInput">Codice</label>
                <input asp-for="Order.SKU" type="text" name="myCountry" class="form-control" id="myInput" placeholder="Codice">
            </div>
            <div class="form-group">
                <label for="formGroupExampleInput">Numero di pezzi</label>
                <input asp-for="Order.Number_Piece" type="number" class="form-control" id="formGroupExampleInput" placeholder="Numero di pezzi">
            </div>
            <div class="form-group">
                <label for="validationTooltip04">Prezzo Unitario (IVA Inclusa) *</label>
                <div class="input-group-append">
                    <input asp-for="Order.Price_Uni" type="text" pattern="^[\d,]+$" class="form-control" id="validationTooltip04" placeholder="Prezzo Unitario ">
                    <span class="input-group-text">€</span>
                </div>
                <div class="valid-tooltip">
                    Looks good!
                </div>
            </div>
            <div class="form-group">
                <label for="exampleFormControlTextarea1">Seleziona data di consegna</label>
                <div class='input-group date'>
                    <input placeholder="Seleziona data di consegna" type='text' class="form-control bg-white" id='datetimepicker1' asp-for="Order.DataOut" />
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>

            <div class="form-group">
                <label for="exampleFormControlTextarea1">Descrizione</label>
                <textarea asp-for="Order.Description" class="form-control" id="exampleFormControlTextarea1" rows="3"></textarea>
            </div>


            @for (var i = 0; i < Model.Operation.Count; i++)
            {
                <div class="form-check">
                    <input type="hidden" asp-for="Operation[i].Operation.OperationID">
                    <input class="form-check-input" type="checkbox" id="flexCheckDefault-@(i)" asp-for="Operation[i].Flag">
                    <label class="form-check-label" for="flexCheckDefault-@(i)">
                        @Model.Operation[i].Operation.Name
                    </label>
                </div>

            }
            <div style="width:100px; margin-top:50px;">
                <button class="btn btn-primary" type="submit">Aggiungi</button>
            </div>
        </form>
    </div>
</div>




<div class="modal" tabindex="-1" role="dialog" style="background-color: rgba(255,255,255,0.7);">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Acquisizione Immagine</h5>
                <button type="button" class="close" onclick="closeModal()" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>L'immagine è stata acquisita correttamente.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="closeModal()">Chiudi</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
        <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
        <script src="~/webcamjs/webcam.js"></script>
        <script language="JavaScript">

            function autocomplete(inp, arr) {
                /*the autocomplete function takes two arguments,
                the text field element and an array of possible autocompleted values:*/
                var currentFocus;
                /*execute a function when someone writes in the text field:*/
                inp.addEventListener("input", function (e) {
                    var a, b, i, val = this.value;
                    /*close any already open lists of autocompleted values*/
                    closeAllLists();
                    if (!val) { return false; }
                    currentFocus = -1;
                    /*create a DIV element that will contain the items (values):*/
                    a = document.createElement("DIV");
                    a.setAttribute("id", this.id + "autocomplete-list");
                    a.setAttribute("class", "autocomplete-items");
                    /*append the DIV element as a child of the autocomplete container:*/
                    this.parentNode.appendChild(a);
                    /*for each item in the array...*/
                    for (i = 0; i < arr.length; i++) {
                        /*check if the item starts with the same letters as the text field value:*/
                        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                            /*create a DIV element for each matching element:*/
                            b = document.createElement("DIV");
                            /*make the matching letters bold:*/
                            b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                            b.innerHTML += arr[i].substr(val.length);
                            /*insert a input field that will hold the current array item's value:*/
                            b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                            /*execute a function when someone clicks on the item value (DIV element):*/
                            b.addEventListener("click", function (e) {
                                /*insert the value for the autocomplete text field:*/
                                inp.value = this.getElementsByTagName("input")[0].value;
                                /*close the list of autocompleted values,
                                (or any other open lists of autocompleted values:*/
                                closeAllLists();
                            });
                            a.appendChild(b);
                        }
                    }
                });
                /*execute a function presses a key on the keyboard:*/
                inp.addEventListener("keydown", function (e) {
                    var x = document.getElementById(this.id + "autocomplete-list");
                    if (x) x = x.getElementsByTagName("div");
                    if (e.keyCode == 40) {
                        /*If the arrow DOWN key is pressed,
                        increase the currentFocus variable:*/
                        currentFocus++;
                        /*and and make the current item more visible:*/
                        addActive(x);
                    } else if (e.keyCode == 38) { //up
                        /*If the arrow UP key is pressed,
                        decrease the currentFocus variable:*/
                        currentFocus--;
                        /*and and make the current item more visible:*/
                        addActive(x);
                    } else if (e.keyCode == 13) {
                        /*If the ENTER key is pressed, prevent the form from being submitted,*/
                        e.preventDefault();
                        if (currentFocus > -1) {
                            /*and simulate a click on the "active" item:*/
                            if (x) x[currentFocus].click();
                        }
                    }
                });
                function addActive(x) {
                    /*a function to classify an item as "active":*/
                    if (!x) return false;
                    /*start by removing the "active" class on all items:*/
                    removeActive(x);
                    if (currentFocus >= x.length) currentFocus = 0;
                    if (currentFocus < 0) currentFocus = (x.length - 1);
                    /*add class "autocomplete-active":*/
                    x[currentFocus].classList.add("autocomplete-active");
                }
                function removeActive(x) {
                    /*a function to remove the "active" class from all autocomplete items:*/
                    for (var i = 0; i < x.length; i++) {
                        x[i].classList.remove("autocomplete-active");
                    }
                }
                function closeAllLists(elmnt) {
                    /*close all autocomplete lists in the document,
                    except the one passed as an argument:*/
                    var x = document.getElementsByClassName("autocomplete-items");
                    for (var i = 0; i < x.length; i++) {
                        if (elmnt != x[i] && elmnt != inp) {
                            x[i].parentNode.removeChild(x[i]);
                        }
                    }
                }
                /*execute a function when someone clicks in the document:*/
                document.addEventListener("click", function (e) {
                    closeAllLists(e.target);
                });
            }

            var countries = @Json.Serialize(Model.OldOrders.Select(s=>s.SKU).ToArray())

            /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
            autocomplete(document.getElementById("myInput"), countries);

            function openModal() {
                document.querySelector(".modal").style.display = "block"
            }
            function closeModal() {
                document.querySelector(".modal").style.display = "none"
            }

            <!-- Javascript code to capture the snapshot and displaying it in the screen -->
            Webcam.set({
                width: 500,
                height: 375,
                image_format: 'png',
                jpeg_quality: 100
            });
            Webcam.attach('#LiveCamera');

            function CaptureSnapshot() {
                Webcam.snap(function (data) {
                    // display results in page
                    document.getElementById('results').innerHTML = '<img src="' + data + '"/>';
                    document.getElementById("Photo_base64").value = data;
                    // Send image data to the controller to store locally or in database
                    Webcam.upload(data,
                        '/WebCam/CaptureImage',
                        function (code, text) {
                            //alert('Snapshot/Image captured successfully...');
                            openModal();
                        });
                });
            }

            $("#datetimepicker1").flatpickr({
                dateFormat: "d/m/Y",
                minDate: "today",
                locale: {
                    weekdays: {
                        shorthand: ['Dom', 'Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab'],
                        longhand: ['Domenica', 'Lunedì', 'Martedì', 'Mercoledì', 'Giovedì', 'Venerdì', 'Sábado'],
                    },
                        months: {
                            shorthand: ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu', 'Lug', 'Ago', 'Set', 'Оtt', 'Nov', 'Dic'],
                            longhand: ['Gennaio', 'Febbraio', 'Мarzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'],
                        }
                }

            });
        </script>
}




